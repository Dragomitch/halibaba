package marche_halibaba_clients;

import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.security.spec.InvalidKeySpecException;

import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.PBEKeySpec;

public class PasswordHash {
	
	private static final String HASH_ALGORITHM = "PBKDF2WithHmacSHA1";

	private static final int ITERATIONS_NBR = 96;
	private static final int SALT_SIZE = 16;
	private static final int HASH_SIZE = 512;
	
	public static String createHash(String password) throws NoSuchAlgorithmException, InvalidKeySpecException, UnsupportedEncodingException {
		
		byte[] salt = generateRandomSalt();
		PBEKeySpec keySpec = new PBEKeySpec(password.toCharArray(), salt, ITERATIONS_NBR, HASH_SIZE);
        SecretKeyFactory secretKeyfactory = SecretKeyFactory.getInstance(HASH_ALGORITHM);
        byte[] hash = secretKeyfactory.generateSecret(keySpec).getEncoded();
        
        System.out.println(ITERATIONS_NBR);
        
		return ITERATIONS_NBR + ":" + toHex(salt) + ":" + toHex(hash);
	}
	
	public static boolean validateHash(String hash) {
		
		return false;
	}
	
    private static String toHex(byte[] array) {
        BigInteger bi = new BigInteger(1, array);
        String hex = bi.toString(16);
        int paddingLength = (array.length * 2) - hex.length();
        if(paddingLength > 0) 
            return String.format("%0" + paddingLength + "d", 0) + hex;
        else
            return hex;
    }
    
    private static byte[] fromHex(String hex) {
        byte[] binary = new byte[hex.length() / 2];
        for(int i = 0; i < binary.length; i++)
        {
            binary[i] = (byte)Integer.parseInt(hex.substring(2*i, 2*i+2), 16);
        }
        return binary;
    }
	
	private static byte[] generateRandomSalt() {
		SecureRandom random = new SecureRandom();
        byte[] salt = new byte[SALT_SIZE];
        random.nextBytes(salt);
        return salt;
	}

}
